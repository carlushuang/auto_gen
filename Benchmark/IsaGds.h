#pragma once

#include "SampleConfig.h"
#include "ProblemControl.h"
#include "IsaGdsKernelWriter.h"

/************************************************************************/
/* solution控制                                                          */
/************************************************************************/
class GdsSolution : public SolutionCtrlBase
{
private:
	T_KernelArgu d_a, d_b, d_c;

public:
	/************************************************************************/
	/* 根据problem参数成solution参数空间                                      */
	/************************************************************************/
	E_ReturnState GenerateSolutionConfigs();

	/************************************************************************/
	/* 申请显存                                                            */
	/************************************************************************/
	E_ReturnState InitDev();

	/************************************************************************/
	/* 返回结果                                                            */
	/************************************************************************/
	E_ReturnState GetBackResult();

	/************************************************************************/
	/* 释放显存	                                                           */
	/************************************************************************/
	void ReleaseDev();

	/************************************************************************/
	/* 根据solution参数生成source, complier和worksize                         */
	/************************************************************************/
	E_ReturnState GenerateSolution();
};

/************************************************************************/
/* 问题控制                                                             */
/************************************************************************/
class GdsProblem : public ProblemCtrlBase
{
public:
	GdsProblem(std::string name) :ProblemCtrlBase(name)
	{
		Solution = new GdsSolution();
	}

public:
	/************************************************************************/
	/* 生成问题空间													        */
	/************************************************************************/
	E_ReturnState GenerateProblemConfigs();

	/************************************************************************/
	/* 参数初始化                                                            */
	/************************************************************************/
	E_ReturnState InitHost();

	/************************************************************************/
	/* HOST端                                                               */
	/************************************************************************/
	E_ReturnState Host();

	/************************************************************************/
	/* 校验                                                                 */
	/************************************************************************/
	E_ReturnState Verify();

	/************************************************************************/
	/* 释放                                                                  */
	/************************************************************************/
	void ReleaseHost();
};
